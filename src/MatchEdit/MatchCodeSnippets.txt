    /*<div className="container">
      <h2>Match Game</h2>
      <p>Rise above traditional 'drill and kill' drudgery by providing your students with an opportunity to practice and learn that is sure to engage them! The 'match game' is a frenetic test of wits in which students race against the clock and earn points while demonstrating both content knowledge and comprehension.</p>
      <h4>Step-by-Step</h4>
      <ul>
        <li>Build a bank of knowledge, known as 'matches'</li>
        <li>(Optional) Customize the game, e.g., duration</li>
        <li>Share the URL with your students</li>
      </ul>
            </div>*/

            
// eslint-disable-next-line
class Editor extends React.Component {
  render() {
    return (<textarea className="editor w-50 align-top" placeholder={this.props.placeholder} value={this.props.text} onChange={this.props.onChange}></textarea>);
  }
}

// eslint-disable-next-line
class JsonEditor extends React.Component {
  render() {
    return (<textarea className="editor w-50 align-top" placeholder={this.props.placeholder} value={this.props.text} readOnly></textarea>);
  }
}

  /*state = {
    placeholder: "term, definition",
    text: '',
    json: '',
    terms: [],
    definitions: []
  }*/

  componentDidMount() {
    //setTimeout(() => { this.setState({ text: '', json: ''}); }, 1000);
  }

      /*const match = {
      title: '',
      instructions: '',
      matches: [],
      matchText: '',
      config: {
        itemsPerBoard: 5,
        duration: 180
      }
    };*/

    /**
   * @param {string} str  Text to parse matches out of.
   * Split text by newline
   * Split into term and definition by comma
   * Perform other cleanup, sanitizing, etc.
   */
  parseMatches = (str) => {

    let json = str.split('\n');
    let matches = new Array(0).fill(null);

    json.reduce((pairs, line) => {
      let vals = line.split(',') || [];
      if (!Array.isArray(vals)
        || !vals.length
        || vals.length < 2
        || vals[0].trim().length === 0
        || vals[1].trim().length === 0) {
        return matches;
      }
      return matches.push({ "term": vals[0].trim(), "definition": vals[1].trim() });
    }, matches);

    return matches;
  }

  toJson = (arr, indentSpaces) => {
    return ((arr && arr.length > 0) ? JSON.stringify(arr.reverse(), null, indentSpaces) : '');
  }


render() {
    // eslint-disable-next-line
    const { id, label, placeholder, value } = this.props;

    /* Pull other supported attributes out of props that may be present */
    const fieldAttrs = (({ rows, cols }) => ({ rows, cols }))(this.props);

    return (
      <div className="form-group">
        <textarea
          id={id}
          placeholder={placeholder.split('\\n').join('\n')}
          value={value.split('\\n').join('\n')}
          onChange={(e) => this.handleEditorChange(e)}
          {...fieldAttrs}
        />
      </div>
    );
  }